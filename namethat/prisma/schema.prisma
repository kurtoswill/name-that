generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to "sqlite" for local dev
  url      = env("DATABASE_URL")
}

model User {
  id       String @id // wallet address as primary key
  username String?
  profile  Json?  // for metadata

  // Relations
  posts       Post[]
  suggestions Suggestion[]
  votes       Vote[]

  @@map("users")
}

model Post {
  id                String    @id @default(cuid())
  creator           String    // wallet address
  title             String
  description       String
  imageUrl          String?
  createdAt         DateTime  @default(now())
  prizeEth          Decimal   @db.Decimal(18, 8)
  usdAtCreation     Decimal   @db.Decimal(10, 2)
  winnerSuggestionId String?
  deleted           Boolean   @default(false)

  // Relations
  user        User         @relation(fields: [creator], references: [id])
  suggestions Suggestion[]
  votes       Vote[]
  winnerSuggestion Suggestion? @relation("WinnerSuggestion", fields: [winnerSuggestionId], references: [id])

  @@map("posts")
}

model Suggestion {
  id        String   @id @default(cuid())
  postId    String
  author    String   // wallet address
  text      String
  createdAt DateTime @default(now())

  // Relations
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [author], references: [id])
  votes     Vote[]
  winnerOfPost Post[] @relation("WinnerSuggestion")

  @@map("suggestions")
}

model Vote {
  id           String   @id @default(cuid())
  postId       String
  suggestionId String
  voter        String   // wallet address
  createdAt    DateTime @default(now())

  // Relations
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  suggestion Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [voter], references: [id])

  // Ensure one vote per voter per post
  @@unique([voter, postId])
  @@map("votes")
}